<?php

namespace App\Services;

use App\Interfaces\Services\UserManagementServiceInterface;
use App\Models\User;
use App\Jobs\ProcessUserVerification;
use Illuminate\Support\Facades\Log;

class UserManagementService implements UserManagementServiceInterface
{
    /**
     * Get users with filtering and pagination
     */
    public function getUsers(array $filters = []): \Illuminate\Contracts\Pagination\LengthAwarePaginator
    {
        $query = User::query();

        // Apply search filter
        if (!empty($filters['search'])) {
            $query->where(function ($q) use ($filters) {
                $q->where('name', 'like', '%' . $filters['search'] . '%')
                  ->orWhere('email', 'like', '%' . $filters['search'] . '%')
                  ->orWhere('company_name', 'like', '%' . $filters['search'] . '%');
            });
        }

        // Apply role filter
        if (!empty($filters['role_filter'])) {
            $query->where('role', $filters['role_filter']);
        }

        // Apply verification filter
        if ($filters['verification_filter'] === 'verified') {
            $query->where('is_verified', true);
        } elseif ($filters['verification_filter'] === 'unverified') {
            $query->where('is_verified', false);
        }

        // Apply sorting
        $sortField = $filters['sort_field'] ?? 'created_at';
        $sortDirection = $filters['sort_direction'] ?? 'desc';
        $query->orderBy($sortField, $sortDirection);

        // Apply pagination
        $perPage = $filters['per_page'] ?? 10;

        return $query->paginate($perPage);
    }

    /**
     * Verify a user's email
     */
    public function verifyUser(int $userId): bool
    {
        try {
            $user = User::findOrFail($userId);

            $user->is_verified = true;
            $user->email_verified_at = now();
            $user->save();

            // Dispatch job for verification processing
            ProcessUserVerification::dispatch($userId, true);

            Log::info("User verified", [
                'user_id' => $userId,
                'email' => $user->email
            ]);

            return true;
        } catch (\Exception $e) {
            Log::error("Failed to verify user", [
                'user_id' => $userId,
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }

    /**
     * Unverify a user's email
     */
    public function unverifyUser(int $userId): bool
    {
        try {
            $user = User::findOrFail($userId);

            $user->is_verified = false;
            $user->email_verified_at = null;
            $user->save();

            // Dispatch job for verification processing
            ProcessUserVerification::dispatch($userId, false);

            Log::info("User unverified", [
                'user_id' => $userId,
                'email' => $user->email
            ]);

            return true;
        } catch (\Exception $e) {
            Log::error("Failed to unverify user", [
                'user_id' => $userId,
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }

    /**
     * Get user statistics
     */
    public function getUserStats(): array
    {
        $totalUsers = User::count();
        $verifiedUsers = User::where('is_verified', true)->count();
        $unverifiedUsers = User::where('is_verified', false)->count();

        $roleStats = User::selectRaw('role, COUNT(*) as count')
            ->groupBy('role')
            ->pluck('count', 'role')
            ->toArray();

        return [
            'total_users' => $totalUsers,
            'verified_users' => $verifiedUsers,
            'unverified_users' => $unverifiedUsers,
            'verification_rate' => $totalUsers > 0 ? round(($verifiedUsers / $totalUsers) * 100, 2) : 0,
            'role_distribution' => $roleStats
        ];
    }
}
